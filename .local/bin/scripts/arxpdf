#!/bin/sh

# arxpdf - Retrieve arXiv preprints as PDFs
# Copyright (C) 2019 Matthew Kukla <matt.kukla@yandex.ru>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

VERSION=0.1.0
URL=https://arxiv.org/pdf/

usage(){
echo 'Usage: arxpdf [arXiv id]... to download a PDF of [arXiv id]...'
echo '       arxpdf [arXiv id]vn... to download the nth version of [arXiv id]'
echo
echo 'arxpdf accepts both the old arXiv identifier format (subject.SC/YYMMNNN)'
echo 'and the current identifier format (YYMM.number).'
echo
echo 'For more about arXiv identifiers, see arxiv.org/help/arxiv_identifier'
echo
echo 'Options:'
echo '-h, --help              Show this message'
echo '-v, --version           Show version number'
exit
}

# Failure message for corrupt PDF
fail_verify(){
echo "Error downloading arXiv:$1 (file corrupted)"
}

# Failure message for curl 
fail_connect(){
echo "Error: connection to the arXiv failed"
}

# Check that the PDF isn't corrupt and has downloaded in its entirety 
verify(){
if [ "$(tail "$1".pdf -n 1)"  != "%%EOF" ]; then
    fail_verify $1
    rm $1.pdf
fi
}

if [ $# = 0 ]; then
    usage
    exit 0
fi

while [ "$#" -gt 0 ]; do

# Download using current identifier format
    if (echo "$1" | grep '^[0-9]\{4\}\.[0-9]\{4\}\([0-9]\?\)\(v[0-9]\)\?$' -q); then
        if ! curl $URL/$1.pdf -o $1.pdf -s; then
            fail_connect
        else
            verify $1
        fi
        shift

# Download using old identifier format
    elif echo $1 | grep '.\/[0-9]\{7\}\(v[0-9]\)\?$' -q; then
        FILE=$(printf '%s' "$1" | tr '/' '-')
        if ! curl $URL/$1.pdf -o $FILE.pdf -s; then
            fail_connect
        else   
            verify $FILE
        fi
        shift

    elif [ $1 = '--help' ] || [ $1 = '-h' ]; then       
        usage
        exit
    
    elif [ $1 = '--version' ] || [ $1 = '-v' ]; then
        echo $VERSION
        exit

    else 
        echo "Unknown option: $1"
        usage 
        exit 1
    fi   
done
