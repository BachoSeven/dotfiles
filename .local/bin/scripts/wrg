#!/usr/bin/env bash

# Replace in files
#
# Usage:
##	> Replace in files. Uses ripgrep to find files, so all ripgrep arguments work. Use `rg` for dry-run, and then replace it with `wrg`.
##
##	- Replace a pattern in a file:
##
##	`wrg {{pattern}} {{filename}} --replace {{replacement}}`
##
##	- Replace a pattern in all files:
##
##	`wrg {{pattern}} --replace {{replacement}}`
#
# Based on:
# https://github.com/lydell/dotfiles/blob/master/bin/pre
#
# Author: Artem Sapegin, sapegin.me
# License: MIT
# https://github.com/sapegin/dotfiles
#

# Common stuff
RED="$(tput setaf 1)"
UNDERLINE="$(tput sgr 0 1)"
NOCOLOR="$(tput sgr0)"
function error() { printf "$UNDERLINE$RED$1$NOCOLOR\n"; }

command -v rg >/dev/null 2>&1 || { error "ripgrep not installed: brew install ripgrep"; exit 1; }

seenReplace=''

for arg in "$@"; do
	if test "$arg" == '--replace' -o "$arg" == '-r'; then
		seenReplace='true'
		break
	fi
done

if test -z "$seenReplace"; then
	error 'You should run wrg with --replace or -r argument'
	exit 1
fi

currentFile=''
didChange=''

(
	rg \
		--context 999999 \
		--with-filename \
		--heading \
		--null \
		--color never \
		--no-line-number \
		--max-columns 0 \
		"$@"
	printf '\n\0'
) |
{
	while IFS= read -r -d '' part; do
		if test -n "$currentFile"; then
			echo "$currentFile"
			# Write file without last two lines
			perl -ne 'push(@buf,$_);END{print @buf[0 ... $#buf-2]}' <<< "$part" > "$currentFile"
			didChange='true'
		fi
		currentFile="$(tail -n 1 <<< "$part")"
	done

	if test -z "$didChange"; then
		echo "No files were changed"
		exit 1
	fi
}
