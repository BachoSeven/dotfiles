## Functions

# System configuration backup
syscp() {
	for f in "$@"; do
		relpath="${$(realpath -s "$f")#/}"
		reldir="$(dirname ~/.local/src/sysdots/$relpath)"
		[ ! -d "$reldir" ] && mkdir -vp "$reldir"
		cp -Pvut "$reldir" "$f"
	done
}

# Credits to https://github.com/SmartFinn/dotfiles for these:
_exists() { (( $+commands[$1] )) }
_run() { # run command if it exists
	local -a saved_cmd=("$@")

	case "$1" in
		sudo) shift 1 ;;
	esac

	if command -v "$1" >/dev/null; then
		echo "\e[1;32m =>\e[0m" "${saved_cmd[@]}" >&2
		"${saved_cmd[@]}"
	fi
}

## Arch
# Pacman
mirrors() {
	grep -v '^$\|^#' /etc/pacman.d/mirrorlist | awk '{print $3}' | awk -F '/' '{print $3}';
}
rip() {
	[ -z "$1" ] && num=50 || num="$1"
	expac --timefmt='%Y-%m-%d %T' '%l\t%n %v' | sort | tail -n $num
}
removeTotPkgsAfterInput() {
	expac --timefmt='%Y-%m-%d %T' '%l\t%n %v' | sort | tail -50 | grep -A $1 $2 | cut -d ' ' -f2 | awk '{print $2}' | xargs sudo pacman -Rsc --noconfirm
}
ownedbypkg() {
	pacman -Qlq $1 | grep -v '/$' | xargs -r du -h | sort -h
}
fp() {
printf "$(pacman --color always "${@:--Ss}" \
	| sed 'N;s/\n//' \
	| fzf -m --ansi --preview 'pacman -Si {1}' \
	| sed 's/ .*//')\n"
}
fpacin() {
	sudo pacman -S $(fp)
}
# Install packages with fzf
in() {
	$AURHELPER -Slq | fzf -q "$1" -m --preview '$AURHELPER -Si {1}'| xargs -ro $AURHELPER -S
}
# Remove installed packages with fzf
re() {
	$AURHELPER -Qq | fzf -q "$1" -m --preview '$AURHELPER -Qi {1}' | xargs -ro $AURHELPER -Rns
}
getdeps() {
	expac -l '\n' %E -S $@ | sort -u
}
mkclean() {
	packages=($(pacman -Qttdq))
	[ -n "$packages" ] && _run sudo pacman -Rns $(echo $packages)
}
cleanup() {
	_run mkclean
	_run $AURHELPER -Scd
	_run yes | rmshit
	_run browser-vacuum
	_run wal -c
}
# AUR [not amazing for non-standard packages...]
aurpublish() {
	PKG="$1"
	_run git clone ssh://aur@aur.archlinux.org/"$PKG".git; cp PKGBUILD $PKG; cd $PKG
	_run $AURHELPER -S --noconfirm namcap && namcap PKGBUILD; $AURHELPER -Rs --noconfirm namcap
	_run makepkg -fs && makepkg --printsrcinfo > .SRCINFO
	ls .gitignore 2>/dev/null || echo "*" > .gitignore
	_run git add -f PKGBUILD .SRCINFO && git commit -a && git push
}
aurupdate() {
	repodir="$1"; shift
	cd $repodir
	$AURHELPER -S --needed --noconfirm namcap
	for repo in "$@"; do
		cp ../"$repo"/PKGBUILD -t "$repo"
		cd "$repo"
		namcap PKGBUILD
		makepkg -fs && makepkg --printsrcinfo > .SRCINFO &&
		git commit -a
		git push
		cd ..
	done
	$AURHELPER -Rs --noconfirm namcap
}
upbootloader() {
	$AURHELPER -Syu limine &&
	sudo rm /boot/EFI/BOOT/BOOTX64.EFI &&
	sudo cp /usr/share/limine/BOOTX64.EFI /boot/EFI/BOOT/ &&
	$AURHELPER -R limine
}
qmkinstall() {
	$AURHELPER -S python-argcomplete python-colorama python-hjson python-milc python-pygments bootloadhid avr-binutils arm-none-eabi-gcc arm-none-eabi-newlib avrdude
	sudo pacman -U https://archive.archlinux.org/packages/a/avr-gcc/avr-gcc-8.3.0-1-x86_64.pkg.tar.xz
	sudo pacman -S avr-libc
}
qmkremove() {
	$AURHELPER -R \
		python-argcomplete \
		python-hjson \
		python-milc \
		python-halo \
		python-colorama \
		python-pygments \
		python-log_symbols \
		python-spinners \
		python-termcolor \
		bootloadhid \
		avr-binutils \
		libftdi \
		confuse \
		arm-none-eabi-gcc \
		arm-none-eabi-binutils \
		arm-none-eabi-newlib \
		avrdude \
		avr-libc \
		avr-gcc
}

# Git
## No arguments: `git status`; with arguments: acts like `git`
src_update() {
	for dir in $dirs; do
		git -C "$dir" rev-parse --is-inside-work-tree >/dev/null 2>&1 || continue
		printf '%s: ' "$dir:t"
		[ "$(($(git -C "$dir" remote | wc -l) > 1))" = "1" ] && { git -C "$dir" fetch --all || printf '%s: Could not fetch upstream...\n' "$dir:t" }
		git -C "$dir" pull 2>/dev/null || echo "Unable to upgrade."
	done
}
gc() { # Clone and `cd`.
	git clone $@ && cd $(basename "$1" .git)
}
ghc() { # Github clone, personal or otherwise
	local ghuser
	local ghrepo
	[ -n "$2" ] && ghuser="$1" || ghrepo="$1"
	[ -z "$ghrepo" ] && ghrepo="$2"
	git clone git@github.com:${ghuser:-BachoSeven}/$ghrepo.git
}
gac() { # Aur git clone
	local PKG
	for PKG in "$@"; do
		git clone ssh://aur@aur.archlinux.org/"$PKG".git
	done
}

# Updates
dirs=(
	~/.config/mpv/scripts/mpvSockets
	~/.config/xplr/plug/completion
	~/.config/xplr/plug/paste-rs
	~/.config/xplr/plug/fzf
	~/.config/xplr/plug/dua-cli
	~/.config/xplr/plug/comex
	~/.config/xplr/plug/icons
	~/.config/xplr/plug/dragon
	~/.config/xplr/plug/xargs
	~/.config/xplr/plug/zoxide
	~/.config/xplr/plug/material-landscape
	~/.local/src/colors
	~/.local/src/AARGH
	~/.local/src/aur
	~/.local/src/sysdots
	~/.local/src/dmenu
	~/.local/src/idasen
	~/.local/src/st
	~/.local/src/subs
	/dati/AP2_QMK/annepro-qmk
	/dati/AP2_QMK/annepro2-shine
	/dati/AP2_QMK/AnnePro2-Tools
)
up2date() {
	_run $AURHELPER
	_run sudo pacnews
	_run nvim +PU +quitall
	_run src_update
}

extract() {
	for f in "$@"
	do
		if [ ! -f "$f" ]; then
			printf "extract: '%s' is not a file\n" "$f" >&2
			return 1
		fi

		case "$f" in
			*.tar)	tar -xf "$f"			;;
			*.tar.bz|*.tbz| \
			*.tar.bz2|*.tbz2)
					tar -xjf "$f"					;;
			*.tar.gz|*.tgz)
					tar -xzf "$f"					;;
			*.tar.xz|*.txz)
					tar -xJf "$f"					;;
			*.tar.[zZ]|*.t[zZ])
					tar -xZf "$f"					;;
			*.tar.lz|*.tlz| \
			*.tar.lzma|*.tlzma| \
			*.tar.lzo|*.tzo| \
			*.tar.zst|*.tzst)
					tar -xaf "$f"					;;
			*.7z)		7za x -- "$f"			;;
			*.a|*.ar)
					ar x -- "$f"					;;
			*.ace)	unace e -- "$f"		;;
			*.alz)	unalz -- "$f"			;;
			*.arc|*.ark|*.ARC|*.ARK)
					nomarch -- "$f"				;;
			*.arj|*.ARJ)
					arj e -r -- "$f"			;;
			*.bz|*.bz2)
					bunzip2 -k -- "$f"		;;
			*.cab|*.CAB|*.exe|*.EXE)
					cabextract "$f"				;;
			*.cpio) cpio -id -F "$f"	;;
			*.deb)	dpkg -x -- "$f" .	;;
			*.gz)		gunzip -k "$f"		;;
			*.lha|*.lzh)
					lha x "$f"						;;
			*.lrz|*.lrzip|*.rz)
					lrunzip -- "$f"				;;
			*.lz)		lzip -d -k -- "$f";;
			*.lz4)	unlz4 -- "$f"			;;
			*.lzma) xz -d -k "$f"			;;
			*.lzo)	lzop -x "$f"			;;
			*.rar)	unrar x -- "$f"		;;
			*.src.rpm|*.rpm|*.spm)
					rpm2cpio "$f" | cpio -dium;;
			*.xz)		unxz -k -- "$f"		;;
			*.[zZ]) uncompress -- "$f";;
			*.zip|*.osz)	unzip -- "$f"			;;
			*.zst)	unzstd -- "$f"		;;
			*.AppImage)
					./"$f" --appimage-extract;;
			*)
				printf "extract: '%s' - unkwown archive format\n" "$f" >&2
				return 1
		esac
	done
}

archive() {
	if [ "$#" -lt 2 ]; then
		printf "usage: $0 <ARCHIVE> [FILE...]\n" >&2
		return 1
	fi

	local archive="$1"; shift

	case "$archive" in
		*.tar.bz|*.tbz| \
		*.tar.bz2|*.tbz2)
			tar -cjf "$archive" "$@" ;;
		*.tar.gz|*.tgz)
			tar -czf "$archive" "$@" ;;
		*.tar.xz|*.txz)
			tar -cJf "$archive" "$@" ;;
		*.tar.[zZ]|*.t[zZ])
			tar -cZf "$archive" "$@" ;;
		*.tar.lzma|*.tlzma| \
		*.tar.lzo|*.tzo| \
		*.tar.lz|*.tlz)
			tar -caf "$archive" "$@" ;;
		*.tar)
			tar -cf  "$archive" "$@" ;;
		*.7z)
			7za a		 "$archive" "$@" ;;
		*.zip)
			zip -r	 "$archive" "$@" ;;
		*)
			printf "'%s' is unknown archive format\n" "$archive" >&2
			return 1
	esac
}

sfont() {
	fc-list		|
	cut -f2 -d:	|
	grep -i "$1"
}

# Source Lines Of Code
sloc() {
	[ "$1" = "-h" ] && print "\nUsage: $0 [directory/file] [other directory/file]\n\nIf launched without arguments, returns total source lines of code for all files in the current directory.\n" >&2 && return 0
	if [ -z "$1" ]; then
		fd -t f --exec-batch sed '/^\s*'"${del:-#}"'/d;/^\s*$/d' | wc -l
	else
		for i in "$@"; do
			if [ -d "$i" ]; then
				printf "%s: " "$i"
				fd --full-path "$i" -t f --exec-batch sed '/^\s*'"${del:-#}"'/d;/^\s*$/d' | wc -l
			elif [ -f "$i" ]; then
				printf "%s: " "$i"
				sed '/^\s*'"${del:-#}"'/d;/^\s*$/d' "$i" | wc -l
			fi
		done
	fi
	unset del
}

## MPV stuff
mpvSpect() {
	mpv --lavfi-complex='[aid1]asplit[ao][a1];[a1]showwaves=mode=cline:colors=white:rate=25[vo]' --really-quiet --vo=tct $@
}
mpvDisk() {
	mpv --lavfi-complex='[aid1]asplit[ao][a1];[a1]avectorscope=r=25:m=lissajous_xy:bc=100:gc=100:rc=75:bf=5:gf=3:rf=1:zoom=1[vo]' --really-quiet --vo=tct $@
}
mpvDisk-alt() {
	mpv --lavfi-complex='[aid1]asplit[ao][a1];[a1]avectorscope=r=25:m=lissajous_xy:bc=200:gc=100:rc=75:bf=5:gf=3:rf=1:zoom=2[vo]' --really-quiet --vo=tct $@
}
resumempv() {
	sock="$(find /tmp/mpvSockets -type s | head -1)" # uhmmmmm
	[ -n "$sock" ] && echo '{ "command": ["set_property", "pause", false] }' | socat - "$sock"
}
ytdl() {
	for id in "$@"; do
		youtube-dl -ic -f 'bestvideo[height<=720]+bestaudio/best[height<=720]' --write-srt --sub-lang en --add-metadata "https://youtube.com/watch?v=$id"
	done
}

## DICTIONARY FUNCTIONS ##
djargon () { curl dict://dict.org/d:${1}:jargon; }
dfoldoc () { curl dict://dict.org/d:${1}:foldoc; }
dthesaurus () { curl dict://dict.org/d:${1}:moby-thes; }
# Dictionary | Usage define <foo>
define() {
	curl -s dict://dict.org/d:$1 | grep -v '^[0-9]'
}
# Sdcv
def() {
	sdcv -n --utf8-output --color "$@" 2>&1 | \
	fold --width=$(tput cols) | \
	less -FRX
}
the() {
	sdcv -n -u "English Thesaurus" --utf8-output --color "$@" 2>&1 | \
	fold --width=$(tput cols) | \
	less -FRX
}
ety() {
	sdcv -n -u "English Etymology" --utf8-output --color "$@" 2>&1 | \
	fold --width=$(tput cols) | \
	less -FRX
}
ita() {
	sdcv -n --data-dir "$XDG_DATA_HOME/stardict/ita" -u "vocabolario" --utf8-output --color "$@" 2>&1 | \
	fold --width=$(tput cols) | \
	less -FRX
}
iteng() {
	sdcv -n --data-dir "$XDG_DATA_HOME/stardict/ita" -u "Italian-English dictionary" --utf8-output --color "$@" 2>&1 | \
	fold --width=$(tput cols) | \
	less -FRX
}
engit() {
	sdcv -n --data-dir "$XDG_DATA_HOME/stardict/ita" -u "English - Italian" --utf8-output --color "$@" 2>&1 | \
	fold --width=$(tput cols) | \
	less -FRX
}
turkeng() {
	sdcv -n --data-dir "$XDG_DATA_HOME/stardict/turk" -u "Babylon Turkish-English" --utf8-output --color "$@" 2>&1 | \
	fold --width=$(tput cols) | \
	less -FRX
}
engturk() {
	sdcv -n --data-dir "$XDG_DATA_HOME/stardict/turk" -u "Babylon English-Turkish" --utf8-output --color "$@" 2>&1 | \
	fold --width=$(tput cols) | \
	less -FRX
}

# simple wrapper to format files for use with `tt`
ttconv() {
	for f in "$@"; do
		name="$(basename $f)"
		iconv -f utf-8 -t ascii//translit $f | sed 's/--/-/g' | sed '/^$/d' | sed 's/^[ \t]*//' | sed 's/\(^.\{1,80\}\).*/\1/' > $name.tt
	done
}
tt() {
	export ESCDELAY=25
	/usr/local/bin/tt $@
	unset ESCDELAY
}

wtr() {
	# see curl wttr.in/:help
	local loc="${1:=$LOCATION}"
	local opts="${2:=pqtF&lang=it}"

	curl wttr.in/${loc}\?${opts} 2>/dev/null | less -RE
}
wtrg() {
	# see curl wttr.in/:help
	local loc="${1:=$LOCATION}"
	local opts="${2:=pqtF&lang=it}"

	curl v2.wttr.in/${loc}\?${opts} 2>/dev/null | less -RE
}

most-used-commands() {
	local -i top="${1:-10}"
	local -i last="${2:-999999}"

	tail -n "$last" "$HISTFILE" \
		| awk '
			{ $1 == "sudo" ? CMD[$2]++ : CMD[$1]++; count++; }
			END {
				for (a in CMD)
					print CMD[a] " " CMD[a]/count*100 "% " a;
				}' \
		| sort -nr \
		| head -n "$top" \
		| column -c2 -s " " -t \
		| nl
}

# xdg-open wrapper
open() {
	for f in "$@"; do
		setsid -f $OPENER $f >/dev/null 2>&1
	done
}

# Meta
logzsh() { # Fix
	zsh -xv 2>&1 | ts -i "%.s" > zshstartup.log
	sort --field-separator=' ' -r -k1 zshstartup.log > sorted.log
}
zsh_bench() {
	for _ ({1..10}); time zsh -i -c exit
}

# ...
.{1..9} () { local d=.; repeat ${0:1} d+=/..; cd $d;}

# Colors
bonsai() {
	printf "              \e[32m&&\n"
	printf "             \e[32m&&&&&\n"
	printf "           \e[32m&&&\/& &&&\n"
	printf "          \e[32m&&\e[33m|,/  |/\e[32m& &&\n"
	printf "           \e[32m&&\e[33m/   /  /_\e[32m&  &&\n"
	printf "             \e[33m\  {  |_____/_\e[32m&\n"
	printf "             \e[33m{  / /          \e[32m&&&\n"
	printf "             \e[33m.\`. \\{___\________\/_\}\n"
	printf "              \e[33m\} \}\{       \\ \n"
	printf "              \e[33m}\{\{         \\____\e[32m&\n"
	printf "             \e[33m\{\}\{           \`\e[32m&\e[33m\\e[32m&&\n"
	printf "             \e[33m{{}             \e[32m&&\n"
	printf "       \e[33m, -=-~{ .-^- _\n"
	printf "             \`}\n"
	printf "              {\n"
}
blocks() {
	echo; echo; for i in 0 1 2 3 4 5 6 7; do
		printf '\033[10%bm	 \033[s\033[1A\033[3D\033[4%bm	 \033[u' "$i" "$i"
	done; printf '\n\033[0m'
}
256col() {
	for i in {0..255}; do print -Pn "%K{$i}  %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+$'\n'}; done
}
xrescol() {
	read -r -d '' -A colors \
			< <( xrdb -query | sed -n 's/.*color\([0-9]\)/\1/p' | sort -nu | cut -f2)
	printf '\e[1;37m\n Black			Red				 Green			Yellow		 Blue				Magenta		 Cyan				White\n───────────────────────────────────────────────────────────────────────────────────────\e[0m\n'
	for color in {0..7}; do printf "\e[$((30+color))m █ %s \e[0m" "${colors[color+1]}"; done
	printf '\n'
	for color in {8..15}; do printf "\e[1;$((22+color))m █ %s \e[0m" "${colors[color+1]}"; done
	printf '\n'
}
truecolor() {
	awk 'BEGIN{
			s="/\\/\\/\\/\\/\\"; s=s s s s s s s s;
			for (colnum = 0; colnum<77; colnum++) {
		r = 255-(colnum*255/76);
		g = (colnum*510/76);
		b = (colnum*255/76);
		if (g>255) g = 510-g;
		printf "\033[48;2;%d;%d;%dm", r,g,b;
		printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
		printf "%s\033[0m", substr(s,colnum+1,1);
			}
			printf "\n";
	}'
}
## Fill screen with colours | Usage: colours
colours() {
	_I=1
	_J=0
	_K=0
	_WIDTH=$COLUMNS
	_MARGIN=0
	while true; do
		_A=$(($RANDOM % 3))
		_B=$(($RANDOM % 2))
		_C=$(($RANDOM % 3))
		case $_A in
		0)
			case $_B in
			0)
				[ $_I -gt 1 ] && _I=$(($_I - 1))
			;;
			1)
				[ $_I -lt 6 ] && _I=$(($_I + 1))
			;;
			esac
		;;
		1)
			case $_B in
			0)
				[ $_J -gt 0 ] && _J=$(($_J - 1))
			;;
			1)
				[ $_J -lt 5 ] && _J=$(($_J + 1))
			;;
			esac
		;;
		2)
			case $_B in
			0)
				[ $_K -gt 0 ] && _K=$(($_K - 1))
			;;
			1)
				[ $_K -lt 5 ] && _K=$(($_K + 1))
			;;
			esac
		;;
		esac
		case $1 in
			1)
				_DELTA=$2
				case $_C in
					0)
						[ $_WIDTH -lt $(($COLUMNS - 2*$_DELTA)) ] && _WIDTH=$(($_WIDTH + 2*$_DELTA))
					;;
					1)
						[ $_WIDTH -gt $((1 + 2*$_DELTA)) ] && _WIDTH=$(($_WIDTH - 2*$_DELTA))
					;;
				esac
				_MARGIN=$((($COLUMNS-$_WIDTH)/2))
			;;
			2)
				_WIDTH=$2
				_DELTA=$3
				case $_C in
					0)
						[ $_MARGIN -le $(($COLUMNS - $_WIDTH - $_DELTA)) ] && _MARGIN=$(($_MARGIN + $_DELTA))
					;;
					1)
						[ $_MARGIN -ge $_DELTA ] && _MARGIN=$(($_MARGIN - $_DELTA))
					;;
				esac
			;;
			*)
				_WIDTH=$COLUMNS
				_MARGIN=0
			;;
		esac
		_NUMBER=$((15 + $_I + 6*$_J + 36*$_K))

		printf "\e[0;49m"
		if [ $_MARGIN -gt 0 ]; then
			for _FOO in $(seq $_MARGIN); do
				printf " "
			done
		fi

		printf "\e[0;48;5;${_NUMBER}m"
		for _FOO in $(seq $_WIDTH); do
			printf " "
		done

		printf "\e[0;49m\n"
	done
}

## Audio
# Calculate average bitrate of files in current folder
avekbps() {
	[ "$#" -lt 1 ] && printf "No format specified... (i.e. $0 mp3)\n" && return 1
	format="$1"
	mediainfo --Output=JSON *.$format | grep '"BitRate":' | cut -d: -f2 | sed "s/\"//g;s/,//g;s/ //g" | awk '{ total += $1 } END { print total/(1000*NR) }'
}
awkcompose() {
[ "$#" -lt 1 ] && printf "Usage: awkcompose OUTPUT_NAME [SAMPLE_RATE:-48000]\n" && return 1
output="awk_$1"
rate=${2:-48000}
awk -v rate="$rate" 'function wl() {
				return (rate/160)*(0.87055^(int(rand()*10)))};
		BEGIN {
				srand();
				wla=wl();
				while(1) {
						wlb=wla;
						wla=wl();
						if (wla==wlb)
								{wla*=2;};
						d=(rand()*10+5)*rate/4;
						a=b=0; c=128;
						ca=40/wla; cb=20/wlb;
						de=rate/10; di=0;
						for (i=0;i<d;i++) {
								a++; b++; di++; c+=ca+cb;
								if (a>wla)
										{a=0; ca*=-1};
								if (b>wlb)
										{b=0; cb*=-1};
								if (di>de)
										{di=0; ca*=0.9; cb*=0.9};
								printf("%c",c)};
						c=int(c);
						while(c!=128) {
								c<128?c++:c--;
								printf("%c",c)};};}' > $output.raw
}
8bit_raw2flac() {
	[ "$#" -lt 2 ] && printf "Usage: 8bit_raw2flac INPUT.raw OUTPUT.flac [SAMPLE_RATE:-384000]\n" && return 1
	input=$1; output=$2; rate=${3:-384000}
	sox -r $rate -e unsigned -b 8 -c 1 $input $output
}
flac2mp3() {
	for f in "$@"; do
			[[ "${f}" != *.flac ]] && continue
			album="$(metaflac --show-tag=album "${f}" | sed 's/[^=]*=//')"
			artist="$(metaflac --show-tag=artist "${f}" | sed 's/[^=]*=//')"
			date="$(metaflac --show-tag=date "${f}" | sed 's/[^=]*=//')"
			title="$(metaflac --show-tag=title "${f}" | sed 's/[^=]*=//')"
			year="$(metaflac --show-tag=date "${f}" | sed 's/[^=]*=//')"
			genre="$(metaflac --show-tag=genre "${f}" | sed 's/[^=]*=//')"
			tracknumber="$(metaflac --show-tag=tracknumber "${f}" | sed 's/[^=]*=//')"

			flac --decode --stdout "${f}" | lame -b 320 --add-id3v2 \
					--tt "${title}" \
					--ta "${artist}" \
					--tl "${album}" \
					--ty "${year}" \
					--tn "${tracknumber}" \
					--tg "${genre}" - "${f%.flac}.mp3"
	done
}
genplaylist() {
	# usage: genplaylist [name] [extension]
	[ -z $1 ] && name="playlist" || name=$1
	[ -z $2 ] && ext="mp3" || ext=$2
	playlist="${name}.m3u"
	if [ -f $playlist ]; then
		rm -i $playlist
	fi
	for f in *.$ext; do
		echo "$f" >> "$playlist"
	done
}

# ffmpeg utilities
webcam() {
	[ -z "$1" ] && ffmpeg -f video4linux2 -i /dev/video0 -vframes 1 out.jpg || ffmpeg -f video4linux2 -i /dev/video0 -vframes $1 out%3d.jpg
}
compressvid() {
	# usage: compressvid VIDEO
	ffmpeg -i $1 -vcodec libx265 -acodec mp3 $2
}
compressvidbrate() {
	# usage: compressvidbrate INPUT OUTPUT [bitrate]
	bitrate=${3:-1000k}
	ffmpeg -i $1 -vcodec libx265 -b:v $bitrate -acodec mp3 $2
}
fixallmkv() {
	for f in *.mkv; do ffmpeg -i $f -c copy "${f%.*}-fixed.${f##*.}"; done
}
vidvolume() {
	[ "$#" -lt 2 ] && print "\nUsage: $0 inputVid [targetPercentage] [outputVid]\n\nExample\n\t$0 rec.mp4 -50 (halves volume)\n" >&2 && return 1

	out=${3:-_$(basename $1)}

	ffmpeg -i $1 -vol $(echo "256 * ($2 / 100)" | bc) -vcodec copy $out
}

# Useful general-purpose shell utilities
gensum() {
	sha512sum "$1" | cut -f1 -d' ' | xclip -r -sel c
}
cpuctl() {
    case $1 in
       performance|ondemand|powersave|schedutil|conservative|userspace) echo "$1" | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor >/dev/null ;;
       status) cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor | uniq ;;
			 monitor) watch -n1 grep \"cpu MHz\" /proc/cpuinfo ;;
       *) echo "Invalid argument. Valid governor values:\n 'performance', 'ondemand', 'powersave', 'conservative', 'schedutil', 'userspace'.\n\nOther options:\n 'status', 'monitor'." ;;
    esac
}
tl() { # noice
if [ $@ ]; then
	tldr $@
else
	tldr --list | fzf --preview 'tldr {} --color always' | xargs -r tldr
fi
}
## List processes - update the list by pressing CTRL-R
lps() {
	ps -ef | fzf --bind 'ctrl-r:reload(ps -ef)' --header 'Press CTRL-R to reload' \
		--header-lines=1 --layout=reverse
}
## Efficient way to select a line to print to stdout: https://unix.stackexchange.com/questions/29878/can-i-access-nth-line-number-of-standard-output
line() {
	a="$1"
	b="${2:-$a}"
	for i in {$a..$b}; do
		awk "NR==$i{print;exit}"
	done
}
_exists highlight &&
ccat() {
	highlight --replace-tabs=8 --out-format=xterm256 --style=pablo --force "$1"
}
## create a new directory and enter it
md() {
	mkdir -p $@ && cd ${@:$#}
}
## edit remote file
vscp() {
	if [[ -z $1 ]]; then
		echo "usage: vscp [[user@]host1:]file1 ... [[user@]host2:]file2"
		return
	fi
	declare -a targs=()
	echo "Editing Remote Files"
	for iarg in "$@"; do
		targ="scp://$(echo $iarg | sed -e 's@:/@//@' | sed -e 's@:@/@')"
		targs=("${targs[@]}" $targ)
	done
	echo ${targs[@]}
	nvim ${targs[@]}
}
compdef vscp=scp
ll() { # A superb ls
	ls -AhlXF --color=auto --time-style="+[34m[[32m%g-%m-%d [35m%k:%M[33m][m" $@
	[[ "$*" == "$1" ]] && echo "  \033[1;96m--[\033[1;34m Dir: \033[36m`ls -Al $@ | grep '^drw' | wc -l`\033[1;32m |\033[1;33m File: \033[32m`ls -Al $@ | grep -v '^drw' | grep -v total | wc -l` ]-- \033[1;37m"
}
ca() {
	if [ "$#" -gt 0 ]; then
		cal "$@"
	else
		cal | sed -e "s/$(date +%e)/$(printf '\e[1;32m')$(date +%e)$(printf '\e[00m')/"
	fi
}
stopwatch() {
	now=`date +%s`
	while true; do
		days=$(( $(($(date +%s) - now)) / 86400 ))
		printf "\e[4 q$days day(s) and $(date -u --date @$((`date +%s` - $now)) +%H:%M:%S)\r"
		sleep 0.1
	done
}
## Credits: https://github.com/slashbeast/conf-mgmt/blob/master/roles/home_files/files/DOTzshrc
confirm() {
	local answer
	printf "zsh: sure you want to run '${YELLOW}$*${NC}' [yN]? "
	read -q answer
	echo
	if [[ "${answer}" =~ ^[Yy]$ ]]; then
			command "${@}"
	else
			return 1
	fi
}
confirm_wrapper() {
	local prefix=''

	if [ "$1" = '--root' ]; then
			local as_root='true'
			shift
	fi
	if [ "${as_root}" = 'true' ] && [ "${USER}" != 'root' ]; then
			prefix="sudo"
	fi
	confirm ${prefix} "$@"
}
poweroff() { confirm_wrapper --root $0 "$@"; }
reboot() { confirm_wrapper --root $0 "$@"; }
hibernate() { confirm_wrapper --root $0 "$@"; }

# Manuals
## Use neovim instead of texinfo (thanks to https://github.com/HiPhish/info.vim)
vinfo() {
	nvim -R -M -c "Info $1 $2" -c 'silent only'
}
# Find inside (with previews)
fman() {
	man -k . | fzf -q "$1" --prompt='man> '  --preview $'echo {} | tr -d \'()\' | awk \'{printf "%s ", $2} {print $1}\' | xargs -r man' | tr -d '()' | awk '{printf "%s ", $2} {print $1}' | xargs -r man
}

# Security
## simple gpg encryption
encrypt() {
	gpg --output $1.gpg --symmetric --cipher-algo AES256 $1
}
## a simple password generator
genpasswd() {
	# usage: genpasswd [-adhps] [length [count]]
	local -i human_readable=0
	local chars=""

	while getopts "adhps" opt; do
		case "$opt" in
			a) chars+="[:alnum:]" ;;
			d) chars+="[:digit:]" ;;
			p) chars+="[:punct:]" ;;
			s) chars+="[:graph:]" ;;
			h) human_readable=1		;;
		esac
	done
	shift $((OPTIND - 1))

	local -i length="${1:-8}"
	local -i count="${2:-1}"

	if [ "$human_readable" -eq 1 ]; then
		command -v apg >/dev/null || return 1
		apg -c /dev/urandom -m "$length" -n "$count" -E oOlL10
	else
		< /dev/urandom \
			| tr -dc "${chars:-[:alnum:]}" \
			| fold -w "$length" \
			| head -n "$count"
	fi
}

# Shellcheck all of my scripts
scck() {
	scripts=(
		/home/fra/.local/bin/statusbar
		/home/fra/.local/bin/scripts
		# /home/fra/.local/bin/cron
		# /home/fra/.local/bin/colors
	)
	for dir in $scripts; do
		while read script; do
			shellcheck -x $dir/$script
		done <<< $(\ls --format single-column $dir)
	done
}

# Imagemagick
## Resize images
75%() { mogrify -resize '75%X75%' "$@" ; }
50%() { mogrify -resize '50%X50%' "$@" ; }
25%() { mogrify -resize '25%X25%' "$@" ; }
## Scan folder for images of a certain ratio
fzfimg() {
	images="$(\ls | \grep -i "\.\(png\|jpg\|jpeg\|gifv\|gif\|webp\|tif\|tiff\|ico\)\(_large\)*$")"
	if [ -z "$1" ]; then
		echo $images |	fzf --preview 'geometry=$(identify -format '%wx%h' {}); ratio="$(printf %.3f "$((10**3 *${geometry%%x*}/${geometry##*x}))e-3")"; if [ $ratio = "1.777" ]; then printf "%s\n%s\n\033[1;34m█\n" "$geometry" "$ratio"; else printf "%s\n%s\n\033[1;31m█\n" "$geometry" "$ratio"; fi	' --multi --height=80%
	else
		echo $images |	fzf --preview 'geometry=$(identify -format '%wx%h' {}); ratio="$(printf %.3f "$((10**3 *${geometry%%x*}/${geometry##*x}))e-3")"; if [ $ratio = "1.777" ]; then printf "%s\n%s\n\033[1;34m█\n" "$geometry" "$ratio"; else printf "%s\n%s\n\033[1;31m█\n" "$geometry" "$ratio"; fi;  chafa --symbols=block -c 240 {}' --multi --height=80%
	fi
}

# pdf utils
img2pdf() {
	while read file; do
	filebase=$(basename $file | cut -d'.' -f1)
	convert -density 300 -quality 100 $file $filebase.pdf
	done <<< $(ls)
}
compresspdf() {
	gs			\
	-sDEVICE=pdfwrite		\
	-dCompatibilityLevel=1.4\
	-dPDFSETTINGS=/screen	\
	-dNOPAUS		\
	-dBATCH			\
	-dQUIET			\
	-sOutputFile=$2.pdf	\
	"$1"
	## PDFSETTINGS:		screen << ebook << prepress
	#
	## If available, also try
	#	 ps2pdf LARGE.pdf SMALL.pdf
}

# Web Stuff
## URL Shortener	| Usage : short <url>
short() {
	curl -F"shorten=$*" https://0x0.st
}
## Upload-file | Usage : share /path/to/file.foo (256 Mib limit)
share() {
	if [[ $# == 0 ]]; then
		printf "Usage: share FILE(s)\n"
		return 1
	fi
	for f in "$@"; do
		curl -sF"file=@${f}" https://0x0.st
	done
}
cheat() {
	curl -m 7 "https://cheat.sh/${1}"
}
## Readable
readw3m() {
	readable -q $@ |
	w3mwrap -T text/html
}
readlynx() {
	readable -q $@ |
	lynx -editor=nvim -stdin -force_html
}
wifipwd() {
	sudo grep -r '^psk=' /etc/NetworkManager/system-connections/ | grep -i "$1"
}
## A wget wrapper
wgetext() {
	if [ "$#" -lt 2 ]; then
		cat <<- EOF
		Download all files with specific extension on a webpage
		Usage: $0 extension[,extension...] URL(s)
		Example:
		$0 mp4 http://example.com/files/
		$0 mp3,ogg,wma http://samples.com/files/
		Google: http://lmgtfy.com/?q=intitle%3Aindex.of+mp3+-html+-htm+-php+-asp+-txt+-pls+madonna
		based on http://stackoverflow.com/a/18709707
		EOF

		return 1
	fi

	extensions="$1"; shift
	outputdir_name="$(awk -F/ '{print $(NF-1);}' <<< "$extensions")"
	mkdir -pv "$outputdir_name"
	cd "$outputdir_name"

	for f in "$@"; do
		wget -c -r -l3 -H -t1 -nd -N -np -A "$extensions" -erobots=off "$f"
	done
}

# Games
play() {
	local p="$HOME/stuff/games"
	local sel=$(fd -t f start.sh "$p" | cut -d/ -f6 | fzf	| head)
	if [ -n "$sel" ]; then
		if [ "$sel" = "Celeste" ] || [ "$sel" = "Hollow Knight" ]; then
			MANGOHUD_DLSYM=1 mangohud "$p"/"$sel"/start.sh
		else
			"$p"/"$sel"/start.sh
		fi
	else
		echo "No game selected :P"
	fi
}

# Locate wrappers
llocate() {
	local -a dbs=( -d /var/lib/mlocate/mlocate.db )

	# don't throw errors when file globs don't match anything
	setopt NULL_GLOB

	for db in "$HOME/.cache/updatedb"/*.db; do
		[ -f "$db" ] || break
		dbs+=( -d "$db" )
	done

	unsetopt NULL_GLOB

	locate "${dbs[@]}" "$@"
}
updatedbmnt() {
	# usage: updatedbmnt <mountpoint>
	# http://askubuntu.com/questions/460535/how-do-i-tell-locate-to-keep-the-index-of-an-external-hdd
	local db_file="${XDG_CACHE_HOME:=$HOME/.cache}/updatedb/$1:t.db"

	[ -n "$1" ] || return 1

	mkdir -p "$db_file:A:h"
	updatedb -l 0 -o "$db_file" -U "$1"
}
# vim: ft=zsh
